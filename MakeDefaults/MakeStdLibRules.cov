#############################################################
#
# Copyright 2011 EFDA | European Fusion Development Agreement
#
# Licensed under the EUPL, Version 1.1 or - as soon they 
# will be approved by the European Commission - subsequent  
# versions of the EUPL (the "Licence"); 
# You may not use this work except in compliance with the 
# Licence. 
# You may obtain a copy of the Licence at: 
#  
# http://ec.europa.eu/idabc/eupl
#
# Unless required by applicable law or agreed to in 
# writing, software distributed under the Licence is 
# distributed on an "AS IS" basis, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
# express or implied. 
# See the Licence for the specific language governing 
# permissions and limitations under the Licence. 
#
# $Id$
#
#############################################################
ctags : %.cpp %.c %.h
	ctags -R

%_Gen.cpp : ../Generic/%_Generic.cpp
	cp ../Generic/$*_Generic.cpp $*_Gen.cpp
	
createLibrary :
	touch createLibrary


$(BUILD_DIR)/%.o : %.cpp
	mkdir -p $(BUILD_DIR)
	$(COMPILER) -c $(OPTIM) $(INCLUDES) $(CPPFLAGS) $(CFLAGSPEC) $(DEBUG)  $*.cpp -o $(BUILD_DIR)/$*.o
#	$(COMPILER) -S $(OPTIM) $(CFLAGS) $(CFLAGSPEC) $(DEBUG)  $*.cpp -o $(BUILD_DIR)/$*.s

$(BUILD_DIR)/%.o : %.c
	mkdir -p $(BUILD_DIR)
	$(COMPILER) -c $(OPTIM) $(INCLUDES) $(CFLAGS) $(CFLAGSPEC) $(DEBUG)  $*.c -o $(BUILD_DIR)/$*.o
#	$(COMPILER) -S $(CFLAGS) $(CFLAGSPEC) $(DEBUG) $(OPTIM)  $*.c -o $(BUILD_DIR)/$*.s

$(BUILD_DIR)/%.a : createLibrary $(OBJS)
	mkdir -p $(BUILD_DIR)
	touch $(BUILD_DIR)/$*.a
	rm -f $(BUILD_DIR)/$*.a	
	ld -r $(OBJS) $(LIBRARIES_STATIC) -o $(BUILD_DIR)/$*.a
	rm -f createLibrary
	
$(BUILD_DIR)/%.so : createLibrary $(OBJS)
	mkdir -p $(BUILD_DIR)
	touch $@
	$(COMPILER) $(LFLAGS) -shared $(OBJS) $(LIBRARIES) $(LIBRARIES_STATIC) -Wl,-soname,$*.so -o $@
	touch $(BUILD_DIR)/lib$*.so
	rm  $(BUILD_DIR)/lib$*.so
	ln -fns $*.so $(BUILD_DIR)/lib$*.so
	rm -f createLibrary

$(BUILD_DIR)/%.def : 
	touch a.out
	objdump -t $(@:%.def=%.a) > $@
	rm a.out

$(BUILD_DIR)/%.exe : createLibrary $(BUILD_DIR)/%.o
	mkdir -p $(BUILD_DIR) 
	touch $(BUILD_DIR)/$*.exe
	echo cannot build executable $(BUILD_DIR)/$*.exe use $(BUILD_DIR)/$*.ex

$(BUILD_DIR)/%.ex : createLibrary $(BUILD_DIR)/%.o $(OBJS)
	mkdir -p $(BUILD_DIR)
	$(COMPILER) $(LFLAGS) $(BUILD_DIR)/$*.o $(OBJS) $(LIBRARIES) $(LIBRARIES_STATIC) -o $(BUILD_DIR)/$*.ex
	rm -f createLibrary
	
#If the file does not exist and we are in a clean context, do not create it!
depends.cov: dependsRaw.cov
ifneq ($(MAKECMDGOALS),clean)
	mkdir -p $(BUILD_DIR)
	@echo "/\.o:/s/^/$(subst /,\/,$(BUILD_DIR))\//" > CreateLinuxDepends.sed
	sed -f CreateLinuxDepends.sed dependsRaw.cov >depends.cov
	rm -f CreateLinuxDepends.sed 
endif

#If the file does not exist and we are in a clean context, do not create it (a touch is still needed to implement the include)!
dependsRaw.cov:
ifneq ($(MAKECMDGOALS),clean)
	mkdir -p $(BUILD_DIR) 
	$(COMPILER) $(INCLUDES) $(CFLAGS) $(CFLAGSPEC) $(DEBUG) $(OPTIM) -MM -I. *.c* > dependsRaw.cov
	@mkdir -p $(BUILD_DIR)
else
	touch $@
endif

$(BUILD_DIR)/%.gam : $(BUILD_DIR)/%.o $(OBJS)
	mkdir -p $(BUILD_DIR)
	$(COMPILER) $(LFLAGS) -shared -fPIC $(OBJS) $(LIBRARIES) $(BUILD_DIR)/$*.o -o $@

$(BUILD_DIR)/%.drv : $(BUILD_DIR)/%.o $(OBJS)
	mkdir -p cov
	$(COMPILER) $(LFLAGS) -shared -fPIC $(OBJS) $(LIBRARIES) $(BUILD_DIR)/$*.o -o $@

%.spb : 
	$(MAKE) -C $* -f Makefile.$(TARGET)

%.spc : 
	$(MAKE) -C $* -f Makefile.$(TARGET) clean

%.spcg : 
	$(MAKE) -C $* -f Makefile.$(TARGET) clean_gen

#When changing branches, if a subfolder no longer exists it also must be deleted.
#This nuke cannot be the general clean rule because we don't want to delete all the built artefacts
#when working at the subdirectory level
clean_wipe_old:
	@$(shell find . -wholename "*/cov/*$(OBJEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(DLLEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(EXEEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(LIBEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(GAMEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(DRVEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(ASMEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(GCNOEXT)" | xargs rm -f)
	@$(shell find . -wholename "*/cov/*$(GCDAEXT)" | xargs rm -f)

clean::  $(SUBPROJC) 
	@rm -f depends*
	@rm -f $(BUILD_DIR)/*$(OBJEXT)
	@rm -f $(BUILD_DIR)/*$(DLLEXT)
	@rm -f $(BUILD_DIR)/*$(EXEEXT)
	@rm -f $(BUILD_DIR)/*$(LIBEXT)
	@rm -f $(BUILD_DIR)/*$(GAMEXT)
	@rm -f $(BUILD_DIR)/*$(DRVEXT)
	@rm -f $(BUILD_DIR)/*$(ASMEXT)
	@rm -f $(BUILD_DIR)/*$(GCNOEXT)
	@rm -f $(BUILD_DIR)/*$(GCDAEXT)
	@rm -f *_Gen.cpp
	@rm -f *_Gen.c
	
clean_gen: $(SUBPROJCG)
	@rm -f *_Gen.cpp
	@rm -f *_Gen.c

